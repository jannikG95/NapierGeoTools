This API is provided at GitHub and it is published together with other geo-tools. It uses the classes of NapierGeoTools.common. 
The Public Transport API is available at https://github.com/jannikG95/NapierGeoTools/tree/master/NapierGeoTools.PublicTransport.
For the use of this API the Google GSON library is needed for the conversion of the JSON String of the response from the Transport for 
London API to POJO (Plain Old Java Object). To use this API, please download the .jar file of the library and add it to the BuildPath 
of this API. This API uses GSON version 2.3.3.

The provided version includes print outputs to the console (System.out.println), which can be commented out before using it. 
They print out the main information while the running program, most of the outputs are generated by requesting a new journey 
from the Transport for London API, generating Java objects from it and the process of storing the information in the persistent 
InformationStorage (Java Serialization).

Using the main functions
The API is built using the façade pattern, which is provided in the façade package. All methods for the normal 
use are provided in this class. This class needs an instance of the PublicTransport class, which contins the main 
logic and functions. This class uses the methods of the other classes to manage requests to the TfL API, getting information 
from the response and storing information in the persistent InformationStorage (using Java Serialization). First, the user has 
to call one of the createNewPublicTransport() methods (with the preferred parameters, which are explained in the JavaDoc). 

Request to TfL-API inclusive the process of adding the information to the InformationStorage
With the createResponseJavaObject() methods (the different parameters are explained in the JavaDoc as well) a new request 
to TfL is made and the response is converted to a Java object, stored as the actual response object of the PublicTransport 
class and the information of this response are added to the information storage. 

The InformationStorage
To get information from the information, several getter methods are provided. Furthermore, the original response object of 
each journey is stored, so that all information, that are not provided by methods can be used by getting the response object
 and reading the information from it. All provided methods and their description can be seen in the JavaDoc. Additional, 
it is possible, to reset the InformationStorage. Therefore, the method resetInformationStorage() is provided. It creates a 
new instance of InformationStorage and replaces the reference in the PublicTransport object with the reference to the new and empty one. 

The actual Response object
To use the information of a journey, which is requested to the Transport for London API, this API provides several methods. 
The PublicTransport class stores the Response object of the last request. This API provides several methods to get different 
information from this object. All methods and their description can be seen in the JavaDoc.

JSON Response
The Transport for London API response is in the JSON format. Because this API provides information in the format of Java objects, 
there are no methods in the façade class to get the original JSON. If the user wants to just get the JSON instead of Java objects 
or information from it, the static methods of the class RequestAndGetJsonFromServer can be used. Calling this methods from somewhere 
else as the provided methods of the PublicTransport class will not update the InformationStorage with the information of the new request. 


